{
  "ast": null,
  "code": "var _jsxFileName = \"C:\\\\Users\\\\AAA\\\\Documents\\\\It_Works_Wear\\\\studysys_frontend\\\\studysys\\\\src\\\\pages\\\\login\\\\login.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Form, Icon, Input, Button, Row, Col, Divider } from \"antd\";\nimport Axios from \"axios\";\nimport AlertMessage from \"./alertMessage\";\nimport qs from \"qs\";\nimport { inputConfig } from \"./formConfig\"; // function hasErrors(fieldsError) {\n//   return Object.keys(fieldsError).some((field) => fieldsError[field]);\n// }\n//Login page\n\nfunction Login(props) {\n  const {\n    getFieldDecorator\n  } = props.form;\n  const {\n    0: isAuthenticated,\n    1: setIsAuthenticated\n  } = useState(undefined);\n  const {\n    0: message,\n    1: setMessage\n  } = useState(undefined); // const [token, setToken] = useState(\n  //   localStorage.getItem(\"token\") || undefined\n  // );\n\n  const BASE_URL = \"http://t.ztest.org/api/teacher/login\";\n  /**\n   * Store new token in Local Storage\n   * @param {token} The token needed to save\n   */\n\n  const saveToken = async token => {\n    console.log(\"save token to LocalStorage, token: \" + token);\n    await localStorage.setItem(\"token\", token);\n  };\n  /**\n   * Verify user authentication with backend server\n   * @param {email} User email\n   * @param {password} User password\n   * @return {data} Data contains: {message, token, isAuthenticated }\n   *            {message} The result of authentication.\n   *            {token} If login succeed, this is the token from backend server.\n   *            {isAuthenticated} Whether login succeed.\n   */\n\n\n  const verifyUser = async (email, password) => {\n    // Headers config\n    const headersConfig = {// \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n    };\n    const requestBody = {\n      email: email,\n      password: password\n    }; // Send a POST request with userId and password\n\n    let response = undefined;\n\n    try {\n      response = await Axios.post(BASE_URL, requestBody, {\n        headers: headersConfig\n      });\n    } catch (e) {\n      response = e.response;\n    } finally {\n      // Handle response data\n      const responseData = response === undefined ? undefined : response.data; // Message\n\n      const message = !responseData ? \"Server is down, please try again later\" : responseData.message; // Token\n\n      const token = !responseData || !responseData.datas ? undefined : responseData.datas.token; // Whether login is successful\n\n      const isAuthenticated = !responseData ? false : responseData.code === 0;\n      return {\n        message,\n        token,\n        isAuthenticated\n      };\n    }\n  };\n  /**\n   * Handle submit action. if user is authenticated, the website will redirect to the URL user input*\n   */\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        verifyUser(values.username, values.password).then(data => {\n          console.log(data.message, data.token, data.isAuthenticated); // If user is authenticated, save the token and redirect to the URL user input\n\n          if (data.isAuthenticated) {\n            // let path = props.location.state.from || \"/home\";\n            // console.log(path);\n            saveToken(data.token).then(() => {\n              console.log(\"redirect to /home\");\n              props.history.push(\"/home\");\n            });\n          }\n\n          setMessage(data.message);\n          setIsAuthenticated(data.isAuthenticated);\n        });\n      }\n    });\n  }\n\n  return __jsx(\"div\", {\n    align: \"middle\",\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, isAuthenticated !== undefined ? __jsx(AlertMessage, {\n    isAuthenticated: isAuthenticated,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Study System\"), __jsx(Divider, {\n    className: \"divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }), __jsx(Form, {\n    className: \"login-form\",\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, inputConfig.map(item => {\n    return __jsx(Form.Item, {\n      key: item.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, getFieldDecorator(item.fieldDecorator.name, {\n      rules: [{\n        required: true,\n        type: item.fieldDecorator.type,\n        message: item.fieldDecorator.message\n      }]\n    })(__jsx(Input, {\n      prefix: __jsx(Icon, {\n        type: item.prefix.iconType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 31\n        }\n      }),\n      type: item.prefix.type,\n      placeholder: item.prefix.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    })));\n  }), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, \"Login\"))))));\n}\n\nexport default Form.create({\n  name: \"normal_login\"\n})(Login);",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/AAA/Documents/It_Works_Wear/studysys_frontend/studysys/src/pages/login/login.js"
    ],
    "names": [
      "React",
      "useState",
      "Form",
      "Icon",
      "Input",
      "Button",
      "Row",
      "Col",
      "Divider",
      "Axios",
      "AlertMessage",
      "qs",
      "inputConfig",
      "Login",
      "props",
      "getFieldDecorator",
      "form",
      "isAuthenticated",
      "setIsAuthenticated",
      "undefined",
      "message",
      "setMessage",
      "BASE_URL",
      "saveToken",
      "token",
      "console",
      "log",
      "localStorage",
      "setItem",
      "verifyUser",
      "email",
      "password",
      "headersConfig",
      "requestBody",
      "response",
      "post",
      "headers",
      "e",
      "responseData",
      "data",
      "datas",
      "code",
      "handleSubmit",
      "preventDefault",
      "validateFields",
      "err",
      "values",
      "username",
      "then",
      "history",
      "push",
      "height",
      "marginBottom",
      "map",
      "item",
      "key",
      "fieldDecorator",
      "name",
      "rules",
      "required",
      "type",
      "prefix",
      "iconType",
      "placeholder",
      "create"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, { useState } from \"react\";\nimport { Form, Icon, Input, Button, Row, Col, Divider } from \"antd\";\nimport Axios from \"axios\";\nimport AlertMessage from \"./alertMessage\";\nimport qs from \"qs\";\nimport { inputConfig } from \"./formConfig\";\n\n// function hasErrors(fieldsError) {\n//   return Object.keys(fieldsError).some((field) => fieldsError[field]);\n// }\n\n//Login page\nfunction Login(props) {\n  const { getFieldDecorator } = props.form;\n  const [isAuthenticated, setIsAuthenticated] = useState(undefined);\n  const [message, setMessage] = useState(undefined);\n  // const [token, setToken] = useState(\n  //   localStorage.getItem(\"token\") || undefined\n  // );\n  const BASE_URL = \"http://t.ztest.org/api/teacher/login\";\n\n  /**\n   * Store new token in Local Storage\n   * @param {token} The token needed to save\n   */\n  const saveToken = async (token) => {\n    console.log(\"save token to LocalStorage, token: \" + token);\n    await localStorage.setItem(\"token\", token);\n  };\n\n  /**\n   * Verify user authentication with backend server\n   * @param {email} User email\n   * @param {password} User password\n   * @return {data} Data contains: {message, token, isAuthenticated }\n   *            {message} The result of authentication.\n   *            {token} If login succeed, this is the token from backend server.\n   *            {isAuthenticated} Whether login succeed.\n   */\n  const verifyUser = async (email, password) => {\n    // Headers config\n    const headersConfig = {\n      // \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n    };\n\n    const requestBody = {\n      email: email,\n      password: password,\n    };\n\n    // Send a POST request with userId and password\n    let response = undefined;\n    try {\n      response = await Axios.post(BASE_URL, requestBody, {\n        headers: headersConfig,\n      });\n    } catch (e) {\n      response = e.response;\n    } finally {\n      // Handle response data\n      const responseData = response === undefined ? undefined : response.data;\n\n      // Message\n      const message = !responseData\n        ? \"Server is down, please try again later\"\n        : responseData.message;\n\n      // Token\n      const token =\n        !responseData || !responseData.datas\n          ? undefined\n          : responseData.datas.token;\n\n      // Whether login is successful\n      const isAuthenticated = !responseData ? false : responseData.code === 0;\n\n      return { message, token, isAuthenticated };\n    }\n  };\n\n  /**\n   * Handle submit action. if user is authenticated, the website will redirect to the URL user input*\n   */\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        verifyUser(values.username, values.password).then((data) => {\n          console.log(data.message, data.token, data.isAuthenticated);\n          // If user is authenticated, save the token and redirect to the URL user input\n          if (data.isAuthenticated) {\n            // let path = props.location.state.from || \"/home\";\n            // console.log(path);\n            saveToken(data.token).then(() => {\n              console.log(\"redirect to /home\");\n              props.history.push(\"/home\");\n            });\n          }\n          setMessage(data.message);\n          setIsAuthenticated(data.isAuthenticated);\n        });\n      }\n    });\n  }\n\n  return (\n    <div align=\"middle\" style={{ height: \"100%\" }}>\n      {isAuthenticated !== undefined ? (\n        <AlertMessage isAuthenticated={isAuthenticated} message={message} />\n      ) : null}\n\n      <Row\n        type=\"flex\"\n        justify=\"center\"\n        align=\"middle\"\n        style={{ height: \"100%\" }}\n      >\n        <Col span={4}>\n          <h4>Study System</h4>\n\n          <Divider className={\"divider\"} />\n\n          {/*Email and password input items*/}\n          <Form className=\"login-form\" style={{ marginBottom: \"20px\" }}>\n            {inputConfig.map((item) => {\n              return (\n                <Form.Item key={item.key}>\n                  {getFieldDecorator(item.fieldDecorator.name, {\n                    rules: [\n                      {\n                        required: true,\n                        type: item.fieldDecorator.type,\n                        message: item.fieldDecorator.message,\n                      },\n                    ],\n                  })(\n                    <Input\n                      prefix={<Icon type={item.prefix.iconType} />}\n                      type={item.prefix.type}\n                      placeholder={item.prefix.placeholder}\n                    />\n                  )}\n                </Form.Item>\n              );\n            })}\n\n            {/*Login button*/}\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                className=\"login-form-button\"\n                onClick={handleSubmit}\n              >\n                Login\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Form.create({ name: \"normal_login\" })(Login);\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
